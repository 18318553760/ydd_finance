go-zero 微服务实践

goctl api go -api *.api -dir ../  -style=goZero
# 生成api业务代码 ， 进入"服务/identity/api/apifile"目录下，执行下面命令
# goctl api go -api *.api -dir ../  -style=goZero
cd identity/api/apifile
goctl api go -api *.api -dir ../ -style gozero 这句*.api需要指定主要名称

goctl api go -api identity.api -dir ../ -style gozero
添加rpc具体看https://go-zero.dev/cn/micro-service.html


--dir 代码输出目录
--api 指定api源文件
--style 指定生成代码文件的文件名称风格，详情见文件名称命名style说明


rpc部署,文档https://go-zero.dev/cn/goctl-rpc.html
进入"服务/identity/rpc/pb"目录下，执行下面命令
$ cd identity/rpc/pb
$ goctl rpc protoc identity.proto --go_out=../ --go-grpc_out=../  --zrpc_out=../
#    去除proto中的json的omitempty
#    sed -i "" 's/,omitempty//g'  ./rpc/pb/*.pb.go，windows就手动替换 ,omitempty 替换成空

官方的：goctl rpc protoc *.proto --go_out=./types --go-grpc_out=./types --zrpc_out=.



--src 必填，proto数据源，目前暂时支持单个proto文件生成
--proto_path 可选，protoc原生子命令，用于指定proto import从何处查找，可指定多个路径,如goctl rpc -I={path1} -I={path2} ...,在没有import时可不填。当前proto路径不用指定，已经内置，-I的详细用法请参考protoc -h
--dir 可选，默认为proto文件所在目录，生成代码的目标目录
--style 可选，输出目录的文件命名风格，详情见https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md
--idea 可选，是否为idea插件中执行，终端执行可以忽略


# 生成api业务代码 ， 进入"服务/cmd/api/desc"目录下，执行下面命令
# goctl api go -api *.api -dir ../  -style=goZero


# 生成rpc业务代码
# 【注】 需要安装下面3个插件
#       protoc >= 3.13.0 ， 如果没安装请先安装 https://github.com/protocolbuffers/protobuf，下载解压到$GOPATH/bin下即可，前提是$GOPATH/bin已经加入$PATH中
#       protoc-gen-go ，如果没有安装请先安装 go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
#       protoc-gen-go-grpc  ，如果没有安装请先安装 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
#
#       如果有要使用grpc-gateway，也请安装如下两个插件 , 没有使用就忽略下面2个插件
#       go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
#       go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
#
# 1）goctl >= 1.3 进入"服务/cmd/rpc/pb"目录下，执行下面命令
#    goctl rpc protoc *.proto --go_out=../ --go-grpc_out=../  --zrpc_out=../
#    去除proto中的json的omitempty
#    sed -i "" 's/,omitempty//g' *.pb.go
# 2）goctl < 1.3 进入"服务/cmd"目录下，执行下面命令
#    goctl rpc proto -src rpc/pb/*.proto -dir ./rpc -style=goZero
#    去除proto中的json的omitempty
#    sed -i "" 's/,omitempty//g'  ./rpc/pb/*.pb.go







添加rpc依赖

api目录下先修改etc配置文件
# 1、添加IdentityRpc配置，
IdentityRpc:
    Etcd:
      Hosts:
        - 127.0.0.1:2379
      Key: identity.rpc
不使用etcd,可以，但是不建议下面的
#rpc service.
IdentityRpcConf:
  Endpoints:
    - identity-rpc:9001

添加user rpc配置

$ vim internal/config/config.go
package config

import (
    "github.com/zeromicro/go-zero/zrpc"
    "github.com/zeromicro/go-zero/rest"
)

type Config struct {
    rest.RestConf
    UserRpc zrpc.RpcClientConf
}
添加依赖2
vim internal/svc/servicecontext.go
package svc

import (
    "go-zero-demo/mall/order/api/internal/config"
    "go-zero-demo/mall/user/rpc/user"

    "github.com/zeromicro/go-zero/zrpc"
)

type ServiceContext struct {
	Config      config.Config
	RedisClient *redis.Redis
	IdentityRpc identity.Identity
}

func NewServiceContext(c config.Config) *ServiceContext {
	return &ServiceContext{
		Config:      c,
		IdentityRpc: identity.NewIdentity(zrpc.MustNewClient(c.IdentityRpcConf)),
	}
}


添加数据库,当然可以不用当前的model生成方法，采用自己写的orm框架，
cd ydd_finance/app/identity
goctl model mysql datasource -url="root:guohong@tcp(127.0.0.1:3306)/identity" -table="*"  -dir="./model" -cache=true

配置具体参考https://go-zero.dev/cn/api-config.html,
增加配置文件参数 .yaml文件
DB:
  DataSource: root:guohong@tcp(mysql:3306)/identity?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai
Cache:
  - Host: redis:6379
    Pass: "123456"
增加配置文件映射
package config

import (
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/zrpc"
)
type Config struct {
	zrpc.RpcServerConf
	JwtAuth struct {
		AccessSecret string
		AccessExpire int64
	}
	DB struct {
		DataSource string
	}
	Cache cache.CacheConf
}


连接数据库参考https://go-zero.dev/cn/mysql.html?h=%E6%95%B0%E6%8D%AE%E5%BA%93
vim  rpc/svc,添加UserModel     model.UserModel
                   	UserAuthModel model.UserAuthModel
package svc

import (
	"github.com/zeromicro/go-zero/core/stores/redis"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"ydd_finance/app/identity/model"
	//"strconv"
	"ydd_finance/app/identity/rpc/internal/config"
)

type ServiceContext struct {
	Config config.Config
	RedisClient *redis.Redis
	UserModel     model.UserModel
	UserAuthModel model.UserAuthModel
}

func NewServiceContext(c config.Config) *ServiceContext {
	// redis.WithPass(strconv.Itoa(c.Redis.Pass))
	redisPool := redis.New(c.Redis.Host,redis.WithPass(c.Redis.Pass))
	return &ServiceContext{
		Config: c,
		RedisClient: redisPool,
		UserAuthModel: model.NewUserAuthModel(sqlx.NewMysql(c.DB.DataSource), c.Cache),
		UserModel:     model.NewUserModel(sqlx.NewMysql(c.DB.DataSource), c.Cache),
	}
}


官方教程通过ddl生成数据文件

$ goctl model mysql ddl -src="./*.sql" -dir="./sql/model" -c
执行上述命令后即可快速生成CURD代码。
  model
  │   ├── error.go
  │   └── usermodel.go
通过datasource生成
$ goctl model mysql datasource -url="user:password@tcp(127.0.0.1:3306)/database" -table="*"  -


新加的接口如下
1、登录返回token
post http://127.0.0.1:8880/identity/v1/login
body参数：json格式
{
    "username":"123",
    "pass":"123"
}

返回值：

{
    "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzgzNTU2NzksImlhdCI6MTY0NjgxOTY3OSwiand0VXNlcklkIjoxfQ.qejUB-WMW3qhyk8Rlev08LCuBC-XMbhQUbHA72NMBHM",
    "accessExpire": 1678355679,
    "refreshAfter": 1662587679
}

2、验证token

get http://127.0.0.1:8880/identity/v1/verify/token

header参数
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzgzNTU2NzksImlhdCI6MTY0NjgxOTY3OSwiand0VXNlcklkIjoxfQ.qejUB-WMW3qhyk8Rlev08LCuBC-XMbhQUbHA72NMBHM

返回值：
{
    "userId": 1,
    "ok": true
}

#配置日记文件，系统自带的，参考https://go-zero.dev/cn/logx.html，在api下的配置文件添加
Log:
  ServiceName: identity-api
  Level: error
添加rpc日记拦截器

// 添加rpc-log
根文件添加拦截器，对自定义文件的封装
s.AddUnaryInterceptors(rpclogger.LoggerInterceptor)
package rpclogger

import (
	"context"

	"ydd_finance/common/perr"

	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/logx"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

/**
* @Description rpc service logger interceptor
**/

func LoggerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	resp, err = handler(ctx, req)
	if err != nil {
		causeErr := errors.Cause(err)                // err类型
		if e, ok := causeErr.(*perr.CodeError); ok { //自定义错误类型
			logx.WithContext(ctx).Errorf("【RPC-SRV-ERR】 %+v", err)
			//转成grpc err
			err = status.Error(codes.Code(e.GetErrCode()), e.GetErrMsg())
		} else {
			logx.WithContext(ctx).Errorf("【RPC-SRV-ERR】 %+v", err)
		}
	}
	return resp, err
}

封装错误日记，打印在控制台，日记保留了可以利用kakfa上云，参考https://go-zero.dev/cn/log-collection.html，其中日记文件为docker容器下的日记
链路追踪，go-zero代码已经帮我们实现好了，只需安装好jaeger，参考https://go-zero.dev/cn/trace.html
添加api配置文件
#链路追踪
Telemetry:
  Name: usercenter-api
  Endpoint: http://127.0.0.1:14268/api/traces
  Sampler: 1.0
  Batcher: jaeger
添加rpc配置文件
#链路追踪
Telemetry:
  Name: usercenter-rpc
  Endpoint: http://127.0.0.1:14268/api/traces
  Sampler: 1.0
  Batcher: jaeger

查看链路追踪效果http://localhost:16686/

服务监控，参考https://go-zero.dev/cn/service-monitor.html，windows安装https://blog.csdn.net/qq_38362419/article/details/108527506，
文件解压在cmd下运行exe文件，添加配置文件
Prometheus:
    Host: 127.0.0.1
    Port: 9091
    Path: /metrics
    编辑prometheus的配置文件prometheus.yml，添加如下配置，并创建targets.json

      - job_name: 'file_ds'
        file_sd_configs:
        - files:
          - targets.json
    编辑targets.json文件，其中targets为shorturl配置的目标地址，并添加了几个默认的标签
      [
          {
              "targets": ["127.0.0.1:9091"],
              "labels": {
                  "job": "shorturl-api",
                  "app": "shorturl-api",
                  "env": "test",
                  "instance": "127.0.0.1:8888"
              }
          }
      ]
    启动prometheus服务，默认侦听在9090端口
    $ prometheus.exe --config.file=./prometheus.yml  prometheus.yml 文件注意空格格式之类的
    在浏览器输入http://127.0.0.1:9090/，然后点击Status -> Targets即可看到状态为Up的Job，并且Lables栏可以看到我们配置的默认的标签
上述部署需要etcd,redis，jaeger支持